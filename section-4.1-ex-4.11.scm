;
(define (map proc lst)
  (if (null? lst)
      '()
      (cons (proc (car lst))
	    (map proc (cdr lst)))))

(define (make-framme variables values)
  (let ((variable-num (length variables))
	(value-num (length values)))
    (if (< variable-num value-num)
	(error "Too many arguments supplied" vars vals)
	(if (> variable-num value-num)
	    (error "Too few arguments supplied" vars vals)
	    (letrec ((build-pairs
		      (lambda (vars vals)
			(if (null? vars)
			    '()
			    (cons
			     (cons (car vars) (car vals))
			     (build-pairs (cdr vars) (cdr vals)))))))
	      (build-pairs vars vals))))))

(define (frame-variables frame)
  (map car frame))

(define (frame-values frame)
  (map cdr frame))

(define (enclosing-environment env)
  (cdr env))

; XXX
(define (add-binding-to-frame! var val frame)
  (set! frame (cons (cons var val) frame)))

(define (extend-environment vars vals base-env)
  (cons (make-framme vars vals) base-env))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
	     (env-loop (enclosing-environment env)))
	    ((eq? var (car (car frame)))
	     (cdr (car frame)))
	    (else (scan (cdr frame)))))
    (if (eq? env the-empty-environment)
	(error "Unbound variable" var)
	(scan (first-frame env))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
	     (env-loop (enclosing-environment env)))
	    ((eq? var (car (car frame)))
	     (set-cdr! (car frame) val))
	    (else (scan (cdr frame)))))
    (if (eq? env the-empty-environment)
	(error "Unbound variable -- SET!" var)
	(scan (first-frame env))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan frame)
      (cond ((null? frame)
	     (add-binding-to-frame! var val frame))
	    ((eq? var (car (car frame)))
	     (set-cdr! (car frame) val))
	    (else (scan (cdr frame)))))
    (scan frame)))
